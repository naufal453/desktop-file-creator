#!/usr/bin/env python3

import gi
import os

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GdkPixbuf


class DesktopFileCreator(Gtk.Window):
    def __init__(self):
        super().__init__(title="Create .desktop File")
        self.set_border_width(15)
        self.set_default_size(600, 400)

        grid = Gtk.Grid(column_spacing=10, row_spacing=10)
        grid.set_column_homogeneous(True)
        self.add(grid)

        def add_entry(label_text, row, has_button=False, button_callback=None):
            label = Gtk.Label(label=label_text, xalign=0)
            grid.attach(label, 0, row, 1, 1)

            box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
            entry = Gtk.Entry()
            entry.set_hexpand(True)
            box.pack_start(entry, True, True, 0)

            if has_button:
                button = Gtk.Button(label="Browse...")
                button.connect("clicked", button_callback)
                box.pack_start(button, False, False, 0)

            grid.attach(box, 1, row, 2, 1)
            return entry

        self.name_entry = add_entry("Name:", 0)
        self.exec_entry = add_entry("Exec:", 1, has_button=True, button_callback=self.on_exec_browse)
        self.categories_entry = add_entry("Categories:", 2)
        self.save_location_entry = add_entry("Save Location:", 3, has_button=True, button_callback=self.on_save_browse)

        # Icon entry with preview
        icon_label = Gtk.Label(label="Icon (optional):", xalign=0)
        grid.attach(icon_label, 0, 4, 1, 1)

        self.icon_entry = Gtk.Entry()
        self.icon_entry.set_hexpand(True)

        icon_button = Gtk.Button(label="Browse...")
        icon_button.connect("clicked", self.on_icon_browse)

        self.icon_preview = Gtk.Image()
        self.icon_preview.set_pixel_size(48)

        icon_box = Gtk.Box(spacing=6)
        icon_box.pack_start(self.icon_entry, True, True, 0)
        icon_box.pack_start(icon_button, False, False, 0)
        icon_box.pack_start(self.icon_preview, False, False, 0)

        grid.attach(icon_box, 1, 4, 2, 1)

        # Create button
        create_btn = Gtk.Button(label="Create .desktop File")
        create_btn.set_hexpand(True)
        create_btn.set_halign(Gtk.Align.CENTER)
        create_btn.connect("clicked", self.create_desktop_file)
        grid.attach(create_btn, 0, 5, 3, 1)

    def on_exec_browse(self, widget):
        dialog = Gtk.FileChooserDialog(
            title="Select Executable File",
            parent=self,
            action=Gtk.FileChooserAction.OPEN,
            buttons=(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK),
        )
        dialog.set_select_multiple(False)

        file_filter = Gtk.FileFilter()
        file_filter.set_name("All Files")
        file_filter.add_pattern("*")
        dialog.set_filter(file_filter)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            self.exec_entry.set_text(dialog.get_filename())
        dialog.destroy()


    def on_icon_browse(self, widget):
        dialog = Gtk.FileChooserDialog(
            title="Select Icon Image",
            parent=self,
            action=Gtk.FileChooserAction.OPEN,
            buttons=(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK),
        )
        image_filter = Gtk.FileFilter()
        image_filter.set_name("Images")
        image_filter.add_mime_type("image/png")
        image_filter.add_mime_type("image/jpeg")
        image_filter.add_mime_type("image/svg+xml")
        image_filter.add_pattern("*.png")
        image_filter.add_pattern("*.jpg")
        image_filter.add_pattern("*.jpeg")
        image_filter.add_pattern("*.svg")
        dialog.add_filter(image_filter)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            file_path = dialog.get_filename()
            self.icon_entry.set_text(file_path)
            self.load_icon_preview(file_path)
        dialog.destroy()

    def on_save_browse(self, widget):
        dialog = Gtk.FileChooserDialog(
            title="Save .desktop File",
            parent=self,
            action=Gtk.FileChooserAction.SAVE,
            buttons=(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_SAVE, Gtk.ResponseType.OK),
        )
        dialog.set_current_name("app.desktop")
        filter_text = Gtk.FileFilter()
        filter_text.set_name("Desktop Files")
        filter_text.add_pattern("*.desktop")
        dialog.add_filter(filter_text)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            self.save_location_entry.set_text(dialog.get_filename())
        dialog.destroy()

    def load_icon_preview(self, path):
        try:
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(path, 48, 48)
            self.icon_preview.set_from_pixbuf(pixbuf)
        except Exception as e:
            self.icon_preview.clear()
            print("Error loading icon preview:", e)

    def create_desktop_file(self, widget):
        name = self.name_entry.get_text().strip()
        exec_cmd = self.exec_entry.get_text().strip()
        icon = self.icon_entry.get_text().strip()
        categories = self.categories_entry.get_text().strip()
        save_path = self.save_location_entry.get_text().strip()

        if not name or not exec_cmd or not categories or not save_path:
            self.show_message("Please fill in all required fields.", Gtk.MessageType.ERROR)
            return
        content = "[Desktop Entry]\n"
        content += "Version=1.0\n"
        content += "Type=Application\n"
        content += f"Name={name}\n"
        content += f'Exec="{exec_cmd}"\n'  # wrapped in quotes
        if icon:
            content += f"Icon={icon}\n"
        content += f"Categories={categories};\n"


        try:
            with open(save_path, "w") as f:
                f.write(content)
            os.chmod(save_path, 0o755)
            self.show_message(f".desktop file created at:\n{save_path}", Gtk.MessageType.INFO)
        except Exception as e:
            self.show_message(f"Error: {str(e)}", Gtk.MessageType.ERROR)

    def show_message(self, message, type):
        dialog = Gtk.MessageDialog(
            transient_for=self,
            flags=0,
            message_type=type,
            buttons=Gtk.ButtonsType.OK,
            text=message,
        )
        dialog.run()
        dialog.destroy()


if __name__ == "__main__":
    win = DesktopFileCreator()
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()
